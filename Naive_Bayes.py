# -*- coding: utf-8 -*-
"""Final_Naive_Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufhSSQxmEGQ1CAIjKmaxsfXrJTDKh_cN   
"""

import numpy as np                                                   # Adwait Borate
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.naive_bayes import GaussianNB
# Uncomment the following if you want to use cross-validation
from sklearn.model_selection import cross_val_score
warnings.filterwarnings('ignore')

# Load dataset from zip file
df = pd.read_csv("Social_Network_Ads.csv")

# Exploratory Data Analysis
print("First 5 rows of the dataset:\n", df.head())

df.tail(10)

df.sample(10)

df.shape

df.dtypes

df.info()

print("\nDataset statistics:\n", df.describe())

# Data Cleaning
df.drop_duplicates()

df.isnull().sum()

df.isna().sum()

# check number of zeroes
print("No of zero  values in Estimated Salary",df[df['EstimatedSalary']==0].shape[0])

print("No of zero  values in Purchased",df[df['Purchased']==0].shape[0])

# Replace zero values with mean
# df['EstimatedSalary'].replace(0,df['EstimatedSalary'].mean(),inplace=True)

# Encode categorical variables (Gender)
label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])  # Male: 1, Female: 0

# Separate target variable and features
target_name = 'Purchased'
target = df[target_name]
data = df.drop(columns=[target_name, 'User ID'])  # Dropping 'User ID' as itâ€™s likely irrelevant

# Scale numerical features
scaler = StandardScaler()
data[['Age', 'EstimatedSalary']] = scaler.fit_transform(data[['Age', 'EstimatedSalary']])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)

# Implement Naive Bayes algorithm
nb = GaussianNB()
nb.fit(X_train, y_train)

# Making Predictions
nb_pred = nb.predict(X_test)
nb_pred.shape

# Model evaluation
print("Model Training Complete")
print("Train set accuracy:", nb.score(X_train, y_train))
print("Test set accuracy:", nb.score(X_test, y_test))

# Confusion matrix
conf_matrix=confusion_matrix(y_test,nb_pred)
print("Confusion Matrix:\n",conf_matrix)
report=classification_report(y_test,nb_pred)
print("Classification Report:\n",report)

